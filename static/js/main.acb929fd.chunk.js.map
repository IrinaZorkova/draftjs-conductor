{"version":3,"sources":["lib/components/ListNestingStyles.js","lib/api/conversion.js","lib/api/copypaste.js","demo/components/SentryBoundary.js","demo/components/Highlight.js","demo/components/Link.js","demo/components/Image.js","demo/components/Snippet.js","demo/utils/DraftUtils.js","demo/components/DemoEditor.js","demo/components/App.js","index.js"],"names":["blockDepthStyleFn","block","depth","getDepth","String","createEditorStateFromRaw","rawContentState","decorator","editorState","contentState","convertFromRaw","EditorState","createWithContent","createEmpty","serialiseEditorStateToRaw","getCurrentContent","convertToRaw","blocks","every","text","trim","length","entityRanges","inlineStyleRanges","FRAGMENT_ATTR","DRAFT_DECORATOR","draftEditorCopyListener","ref","e","selection","window","getSelection","clipboardData","rangeCount","anchorNode","focusNode","anchor","Element","parentElement","focus","anchorDecorator","closest","focusDecorator","contains","isSelectionInDecorator","fragment","editorRoot","selectionState","getDraftEditorSelection","getContentStateFragment","getText","getSelectedContent","_latestEditorState","editor","content","ContentState","createFromBlockArray","toArray","serialisedContent","JSON","stringify","fragmentElt","document","createElement","appendChild","getRangeAt","cloneContents","setAttribute","setData","toString","outerHTML","preventDefault","SentryBoundary","Component","constructor","props","super","this","state","error","componentDidCatch","errorInfo","isRavenAvailable","Raven","setState","captureException","extra","render","children","className","type","onClick","lastEventId","showReportDialog","href","target","rel","style","textDecoration","location","reload","onCopy","value","hidden","body","select","execCommand","removeChild","Highlight","position","bind","right","linkStrategy","contentBlock","callback","findEntityRanges","character","entityKey","getEntity","getType","Link","entity","title","getData","url","Image","getEntityAt","src","alt","width","Snippet","contentEditable","isCollapsed","RichUtils","insertSoftNewline","newContent","Modifier","removeRange","getSelectionAfter","getBlockForKey","getStartKey","insertText","getInlineStyleAt","getStartOffset","push","NestingStyles","React","memo","max","selectorPrefix","minDepth","maxDepth","styles","d","prefix","counter","m","generateListNestingStyles","DRAFT_DEFAULT_MAX_DEPTH","BLOCKS","BLOCKS_EXTENDED","STYLES","BOLD","ITALIC","STYLES_EXTENDED","CODE","STRIKETHROUGH","UNDERLINE","ENTITIES","label","attributes","whitelist","DemoEditor","CompositeDecorator","strategy","component","readOnly","onChange","onTab","addBR","toggleReadOnly","toggleStyle","toggleBlock","toggleEntity","blockRenderer","handlePastedText","componentDidMount","copySource","editorElt","addEventListener","unregister","removeEventListener","registerCopySource","editorRef","componentWillUnmount","nextState","toggleInlineStyle","toggleBlockType","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","toggleLink","editable","html","newState","DOMParser","parseFromString","querySelector","fragmentAttr","getAttribute","rawContent","parse","getBlockMap","replaceWithFragment","handleDraftEditorPastedText","event","DraftUtils","extended","Object","keys","map","key","onMouseDown","stripPastedStyles","blockRendererFn","blockStyleFn","defaultProps","copyPasteContent","offset","entityMap","mutability","data","listNestingContent","App","mount","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.acb929fd.chunk.js","sourcesContent":["// @flow\nimport React from \"react\";\n\nimport type { BlockNode } from \"draft-js/lib/BlockNode\";\n\n// Default maximum block depth supported by Draft.js CSS.\nexport const DRAFT_DEFAULT_MAX_DEPTH = 4;\n\n// Default depth class prefix from Draft.js CSS.\nexport const DRAFT_DEFAULT_DEPTH_CLASS = \"public-DraftStyleDefault-depth\";\n\n/**\n * Generates CSS styles for list items, for a given selector pattern.\n * @param {string} selectorPrefix\n * @param {number} minDepth\n * @param {number} maxDepth\n */\nexport const generateListNestingStyles = (\n  selectorPrefix: string,\n  minDepth: number,\n  maxDepth: number,\n) => {\n  let styles = \"\";\n\n  for (let depth = minDepth; depth <= maxDepth; depth++) {\n    const d = String(depth);\n    const prefix = `${selectorPrefix}${d}`;\n    const counter = `ol${d}`;\n    const margin = 1.5 * (depth + 1);\n    const m = String(margin);\n\n    styles += `\n.${prefix}.public-DraftStyleDefault-listLTR { margin-left: ${m}em; }\n.${prefix}.public-DraftStyleDefault-listRTL { margin-right: ${m}em; }\n.${prefix}.public-DraftStyleDefault-orderedListItem::before { content: counter(${counter}) '. '; counter-increment: ${counter}; }\n.${prefix}.public-DraftStyleDefault-reset { counter-reset: ${counter}; }`;\n  }\n\n  return styles;\n};\n\n/**\n * Dynamically generates the right list nesting styles.\n * Can be wrapped as a pure component - to re-render only when `max` changes (eg. never).\n */\nexport const ListNestingStyles = (props: { max: number }) => {\n  const { max } = props;\n  const min = DRAFT_DEFAULT_MAX_DEPTH + 1;\n\n  return max > DRAFT_DEFAULT_MAX_DEPTH ? (\n    <style>\n      {generateListNestingStyles(DRAFT_DEFAULT_DEPTH_CLASS, min, max)}\n    </style>\n  ) : null;\n};\n\n/**\n * Add depth classes that Draft.js doesn't provide.\n * See https://github.com/facebook/draft-js/blob/232791a4e92d94a52c869f853f9869367bdabdac/src/component/contents/DraftEditorContents-core.react.js#L58-L62.\n * @param {ContentBlock} block\n */\nexport const blockDepthStyleFn = (block: BlockNode) => {\n  const depth = block.getDepth();\n  return depth > DRAFT_DEFAULT_MAX_DEPTH\n    ? `${DRAFT_DEFAULT_DEPTH_CLASS}${String(depth)}`\n    : \"\";\n};\n","// @flow\nimport { EditorState, convertFromRaw, convertToRaw } from \"draft-js\";\nimport type { RawDraftContentState } from \"draft-js/lib/RawDraftContentState\";\nimport type { DraftDecoratorType } from \"draft-js/lib/DraftDecoratorType\";\n\nconst EMPTY_CONTENT_STATE = null;\n\n/**\n * Creates a new EditorState from a RawDraftContentState, or an empty editor state by\n * passing `null`. Optionally takes a decorator.\n */\nexport const createEditorStateFromRaw = (\n  rawContentState: ?RawDraftContentState,\n  decorator?: ?DraftDecoratorType,\n) => {\n  let editorState;\n\n  if (rawContentState) {\n    const contentState = convertFromRaw(rawContentState);\n    editorState = EditorState.createWithContent(contentState, decorator);\n  } else {\n    editorState = EditorState.createEmpty(decorator);\n  }\n\n  return editorState;\n};\n\n/**\n * Serialises the editorState using `convertToRaw`, but returns `null` if\n * the editor content is empty (no text, entities, styles).\n */\nexport const serialiseEditorStateToRaw = (editorState: EditorState) => {\n  const contentState = editorState.getCurrentContent();\n  const rawContentState = convertToRaw(contentState);\n\n  const isEmpty = rawContentState.blocks.every((block) => {\n    const isEmptyBlock =\n      block.text.trim().length === 0 &&\n      (!block.entityRanges || block.entityRanges.length === 0) &&\n      (!block.inlineStyleRanges || block.inlineStyleRanges.length === 0);\n    return isEmptyBlock;\n  });\n\n  return isEmpty ? EMPTY_CONTENT_STATE : rawContentState;\n};\n","// @flow\nimport getContentStateFragment from \"draft-js/lib/getContentStateFragment\";\nimport getDraftEditorSelection from \"draft-js/lib/getDraftEditorSelection\";\nimport {\n  EditorState,\n  Modifier,\n  convertToRaw,\n  convertFromRaw,\n  ContentState,\n} from \"draft-js\";\n\nimport type { ElementRef } from \"react\";\nimport type { Editor, EditorState as EditorStateType } from \"draft-js\";\n\n// Custom attribute to store Draft.js content in the HTML clipboard.\nconst FRAGMENT_ATTR = \"data-draftjs-conductor-fragment\";\n\nconst DRAFT_DECORATOR = '[data-contents=\"true\"] [contenteditable=\"false\"]';\n\n// Checks whether the selection is inside a decorator or not.\n// This is important to change the copy-cut behavior accordingly.\nconst isSelectionInDecorator = (selection: Selection) => {\n  const { anchorNode, focusNode } = selection;\n  if (!anchorNode || !focusNode) {\n    return false;\n  }\n\n  const anchor =\n    anchorNode instanceof Element ? anchorNode : anchorNode.parentElement;\n  const focus =\n    focusNode instanceof Element ? focusNode : focusNode.parentElement;\n\n  const anchorDecorator = anchor && anchor.closest(DRAFT_DECORATOR);\n  const focusDecorator = focus && focus.closest(DRAFT_DECORATOR);\n\n  return (\n    anchorDecorator &&\n    focusDecorator &&\n    (anchorDecorator.contains(focusDecorator) ||\n      focusDecorator.contains(anchorDecorator))\n  );\n};\n\n// Get clipboard content from the selection like Draft.js would.\nconst getSelectedContent = (\n  editorState: EditorStateType,\n  editorRoot: HTMLElement,\n) => {\n  const { selectionState } = getDraftEditorSelection(editorState, editorRoot);\n\n  const fragment = getContentStateFragment(\n    editorState.getCurrentContent(),\n    selectionState,\n  );\n\n  // If the selection contains no content (according to Draft.js), use the default browser behavior.\n  // This happens when selecting text that's within contenteditable=false blocks in Draft.js.\n  // See https://github.com/thibaudcolas/draftjs-conductor/issues/12.\n  const isEmpty = fragment.every((block) => {\n    return block.getText().length === 0;\n  });\n\n  return isEmpty ? null : fragment;\n};\n\n// Overrides the default copy/cut behavior, adding the serialised Draft.js content to the clipboard data.\n// See also https://github.com/basecamp/trix/blob/62145978f352b8d971cf009882ba06ca91a16292/src/trix/controllers/input_controller.coffee#L415-L422\n// We serialise the editor content within HTML, not as a separate mime type, because Draft.js only allows access\n// to HTML in its paste event handler.\nconst draftEditorCopyListener = (\n  ref: ElementRef<Editor>,\n  e: Event & {\n    clipboardData: DataTransfer,\n  },\n) => {\n  const selection = window.getSelection();\n\n  // Completely skip event handling if clipboardData is not supported (IE11 is out).\n  // Also skip if there is no selection ranges.\n  // Or if the selection is fully within a decorator.\n  if (\n    !e.clipboardData ||\n    selection.rangeCount === 0 ||\n    isSelectionInDecorator(selection)\n  ) {\n    return;\n  }\n\n  const fragment = getSelectedContent(ref._latestEditorState, ref.editor);\n\n  // Override the default behavior if there is selected content.\n  if (fragment) {\n    const content = ContentState.createFromBlockArray(fragment.toArray());\n    const serialisedContent = JSON.stringify(convertToRaw(content));\n\n    // Create a temporary element to store the selection’s HTML.\n    // See also Rangy's implementation: https://github.com/timdown/rangy/blob/1e55169d2e4d1d9458c2a87119addf47a8265276/src/core/domrange.js#L515-L520.\n    const fragmentElt = document.createElement(\"div\");\n    // Modern browsers only support a single range.\n    fragmentElt.appendChild(selection.getRangeAt(0).cloneContents());\n    fragmentElt.setAttribute(FRAGMENT_ATTR, serialisedContent);\n    // We set the style property to replicate the browser's behavior of inline styles in rich text copy-paste.\n    // In Draft.js, this is important for line breaks to be interpreted correctly when pasted into another word processor.\n    // See https://github.com/facebook/draft-js/blob/a1f4593d8fa949954053e5d5840d33ce1d1082c6/src/component/base/DraftEditor.react.js#L328.\n    fragmentElt.setAttribute(\"style\", \"white-space: pre-wrap;\");\n\n    e.clipboardData.setData(\"text/plain\", selection.toString());\n    e.clipboardData.setData(\"text/html\", fragmentElt.outerHTML);\n\n    e.preventDefault();\n  }\n};\n\n/**\n * Registers custom copy/cut event listeners on an editor.\n */\nexport const registerCopySource = (ref: ElementRef<Editor>) => {\n  const editorElt = ref.editor;\n  const onCopy = draftEditorCopyListener.bind(null, ref);\n\n  editorElt.addEventListener(\"copy\", onCopy);\n  editorElt.addEventListener(\"cut\", onCopy);\n\n  return {\n    unregister() {\n      editorElt.removeEventListener(\"copy\", onCopy);\n      editorElt.removeEventListener(\"cut\", onCopy);\n    },\n  };\n};\n\n/**\n * Handles pastes coming from Draft.js editors set up to serialise\n * their Draft.js content within the HTML.\n * This SHOULD NOT be used for stripPastedStyles editor.\n */\nexport const handleDraftEditorPastedText = (\n  html: ?string,\n  editorState: EditorStateType,\n) => {\n  // Plain-text pastes are better handled by Draft.js.\n  if (html === \"\" || typeof html === \"undefined\" || html === null) {\n    return false;\n  }\n\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  const fragmentElt = doc.querySelector(`[${FRAGMENT_ATTR}]`);\n\n  // Handle the paste if it comes from draftjs-conductor.\n  if (fragmentElt) {\n    const fragmentAttr = fragmentElt.getAttribute(FRAGMENT_ATTR);\n    let rawContent;\n\n    try {\n      // If JSON parsing fails, leave paste handling to Draft.js.\n      // There is no reason for this to happen, unless the clipboard was altered somehow.\n      // $FlowFixMe\n      rawContent = JSON.parse(fragmentAttr);\n    } catch (error) {\n      return false;\n    }\n\n    const fragment = convertFromRaw(rawContent).getBlockMap();\n\n    const content = Modifier.replaceWithFragment(\n      editorState.getCurrentContent(),\n      editorState.getSelection(),\n      fragment,\n    );\n    return EditorState.push(editorState, content, \"insert-fragment\");\n  }\n\n  return false;\n};\n","// @flow\nimport React, { Component } from \"react\";\nimport type { Node } from \"react\";\n\ntype Props = {\n  children: Node,\n};\n\ntype State = {\n  error: ?Error,\n};\n\nclass SentryBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  componentDidCatch(error: Error, errorInfo: { componentStack: string }) {\n    const isRavenAvailable = !!window.Raven;\n    this.setState({ error });\n\n    if (isRavenAvailable) {\n      window.Raven.captureException(error, { extra: errorInfo });\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    const isRavenAvailable = !!window.Raven;\n\n    return error ? (\n      <div className=\"DraftEditor-root\">\n        <div className=\"DraftEditor-editorContainer\">\n          <div className=\"public-DraftEditor-content\">\n            {/* <img src={oops} /> */}\n            <div className=\"u-text-center\">\n              <p>Oops. The editor just crashed.</p>\n              <p>\n                Our team has been notified. You can provide us with more\n                information if you want to.\n              </p>\n              <div>\n                {isRavenAvailable ? (\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      window.Raven.lastEventId() &&\n                      window.Raven.showReportDialog()\n                    }\n                  >\n                    Submit a report\n                  </button>\n                ) : (\n                  <a\n                    href=\"https://github.com/thibaudcolas/draftjs-conductor/issues\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{\n                      textDecoration: \"underline\",\n                    }}\n                  >\n                    Open a GitHub issue\n                  </a>\n                )}\n                <span>&nbsp;</span>\n                <button\n                  type=\"button\"\n                  onClick={() => window.location.reload(false)}\n                >\n                  Reload the page\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ) : (\n      children\n    );\n  }\n}\n\nexport default SentryBoundary;\n","// @flow\nimport React from \"react\";\n\nconst onCopy = (value: string) => {\n  const hidden = document.createElement(\"textarea\");\n  hidden.value = value;\n\n  // $FlowFixMe\n  document.body.appendChild(hidden);\n  hidden.select();\n  document.execCommand(\"copy\");\n  // $FlowFixMe\n  document.body.removeChild(hidden);\n};\n\nconst Highlight = ({ value }: { value: string }) => (\n  <pre style={{ position: \"relative\" }}>\n    <button\n      onClick={onCopy.bind(null, value)}\n      style={{ position: \"absolute\", right: \"1rem\" }}\n    >\n      Copy\n    </button>\n    <code>{value}</code>\n  </pre>\n);\n\nexport default Highlight;\n","// @flow\nimport React from \"react\";\nimport type { Node } from \"react\";\nimport { ContentState } from \"draft-js\";\nimport type { ContentBlock } from \"draft-js\";\n\ntype Props = {\n  contentState: ContentState,\n  entityKey: string,\n  children: Node,\n};\n\nexport const linkStrategy = (\n  contentBlock: ContentBlock,\n  callback: (start: number, end: number) => void,\n  contentState: ContentState,\n) => {\n  contentBlock.findEntityRanges((character) => {\n    const entityKey = character.getEntity();\n    return (\n      entityKey !== null &&\n      contentState.getEntity(entityKey).getType() === \"LINK\"\n    );\n  }, callback);\n};\n\nconst Link = ({ contentState, entityKey, children }: Props) => {\n  const entity = contentState.getEntity(entityKey);\n  return (\n    <span className=\"link\" title={entity.getData().url}>\n      {children}\n    </span>\n  );\n};\n\nexport default Link;\n","// @flow\nimport React from \"react\";\nimport { ContentBlock, ContentState } from \"draft-js\";\n\nconst Image = ({\n  block,\n  contentState,\n}: {\n  block: ContentBlock,\n  contentState: ContentState,\n}) => {\n  const entityKey = block.getEntityAt(0);\n  const src = entityKey\n    ? contentState.getEntity(entityKey).getData().src\n    : \"/404\";\n\n  return (\n    <div>\n      <p>Image:</p>\n      <img src={src} alt=\"\" width=\"256\" />\n    </div>\n  );\n};\n\nexport default Image;\n","// @flow\nimport React from \"react\";\nimport { ContentBlock, ContentState } from \"draft-js\";\n\nimport \"./Snippet.css\";\n\nconst Snippet = ({\n  block,\n  contentState,\n}: {\n  block: ContentBlock,\n  contentState: ContentState,\n}) => {\n  const entityKey = block.getEntityAt(0);\n  const text = entityKey\n    ? contentState.getEntity(entityKey).getData().text\n    : \"Placeholder\";\n  return (\n    <div className=\"Snippet\" contentEditable={false}>\n      This is a snippet block:\n      <div className=\"Snippet__text\" contentEditable={false}>\n        {text}\n      </div>\n    </div>\n  );\n};\n\nexport default Snippet;\n","// @flow\nimport { EditorState, Modifier, RichUtils } from \"draft-js\";\n\nconst addLineBreak = (editorState: EditorState) => {\n  const content = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n\n  if (selection.isCollapsed()) {\n    return RichUtils.insertSoftNewline(editorState);\n  }\n\n  let newContent = Modifier.removeRange(content, selection, \"forward\");\n  const fragment = newContent.getSelectionAfter();\n  const block = newContent.getBlockForKey(fragment.getStartKey());\n  newContent = Modifier.insertText(\n    newContent,\n    fragment,\n    \"\\n\",\n    block.getInlineStyleAt(fragment.getStartOffset()),\n    null,\n  );\n  return EditorState.push(editorState, newContent, \"insert-fragment\");\n};\n\nexport default {\n  addLineBreak,\n};\n","// @flow\nimport React, { Component } from \"react\";\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  CompositeDecorator,\n  AtomicBlockUtils,\n  ContentBlock,\n} from \"draft-js\";\nimport type { DraftBlockType } from \"draft-js/lib/DraftBlockType\";\nimport type { DraftEntityType } from \"draft-js/lib/DraftEntityType\";\n\nimport {\n  ListNestingStyles,\n  blockDepthStyleFn,\n  registerCopySource,\n  handleDraftEditorPastedText,\n  createEditorStateFromRaw,\n  serialiseEditorStateToRaw,\n} from \"../../lib/index\";\n\nimport SentryBoundary from \"./SentryBoundary\";\nimport Highlight from \"./Highlight\";\nimport Link, { linkStrategy } from \"./Link\";\nimport Image from \"./Image\";\nimport Snippet from \"./Snippet\";\n\nimport DraftUtils from \"../utils/DraftUtils\";\n\nimport \"./DemoEditor.css\";\n\nconst NestingStyles = React.memo(ListNestingStyles);\n\nconst BLOCKS = {\n  \"unstyled\": \"P\",\n  \"unordered-list-item\": \"UL\",\n  \"ordered-list-item\": \"OL\",\n  \"header-one\": \"H1\",\n  \"header-two\": \"H2\",\n  \"header-three\": \"H3\",\n  \"code-block\": \"{ }\",\n};\n\nconst BLOCKS_EXTENDED = {\n  \"unstyled\": \"P\",\n  \"unordered-list-item\": \"UL\",\n  \"ordered-list-item\": \"OL\",\n  \"header-one\": \"H1\",\n  \"header-two\": \"H2\",\n  \"header-three\": \"H3\",\n  \"header-four\": \"H4\",\n  \"header-five\": \"H5\",\n  \"header-six\": \"H6\",\n  \"blockquote\": \"❝\",\n  \"code-block\": \"{ }\",\n};\n\nconst STYLES = {\n  BOLD: \"B\",\n  ITALIC: \"I\",\n};\n\nconst STYLES_EXTENDED = {\n  BOLD: \"B\",\n  ITALIC: \"I\",\n  CODE: \"`\",\n  STRIKETHROUGH: \"~\",\n  UNDERLINE: \"_\",\n};\n\nconst ENTITIES = [\n  {\n    type: \"LINK\",\n    label: \"🔗\",\n    attributes: [\"url\"],\n    whitelist: {\n      href: \"^(http:|https:|undefined$)\",\n    },\n  },\n  {\n    type: \"IMAGE\",\n    label: \"📷\",\n    attributes: [\"src\"],\n    whitelist: {\n      src: \"^http\",\n    },\n  },\n  {\n    type: \"SNIPPET\",\n    label: \"🌱\",\n    attributes: [\"text\"],\n    whitelist: {},\n  },\n  {\n    type: \"HORIZONTAL_RULE\",\n    label: \"HR\",\n    attributes: [],\n    whitelist: {},\n  },\n];\n\nconst MAX_LIST_NESTING = 15;\n\ntype Props = {\n  rawContentState: ?{},\n  extended: boolean,\n};\n\ntype State = {\n  editorState: EditorState,\n  readOnly: boolean,\n};\n\n/* :: import type { ElementRef } from \"react\"; */\n\n/**\n * Demo editor.\n */\nclass DemoEditor extends Component<Props, State> {\n  /* :: editorRef: ?ElementRef<Editor>; */\n  /* :: copySource: { unregister: () => void }; */\n\n  static defaultProps = {\n    rawContentState: null,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    const { rawContentState } = props;\n\n    const decorator = new CompositeDecorator([\n      {\n        strategy: linkStrategy,\n        component: Link,\n      },\n    ]);\n\n    this.state = {\n      // $FlowFixMe Unclear why the decorator API disagrees with itself.\n      editorState: createEditorStateFromRaw(rawContentState, decorator),\n      readOnly: false,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onTab = this.onTab.bind(this);\n    this.addBR = this.addBR.bind(this);\n    this.toggleReadOnly = this.toggleReadOnly.bind(this);\n    this.toggleStyle = this.toggleStyle.bind(this);\n    this.toggleBlock = this.toggleBlock.bind(this);\n    this.toggleEntity = this.toggleEntity.bind(this);\n    this.blockRenderer = this.blockRenderer.bind(this);\n    this.handlePastedText = this.handlePastedText.bind(this);\n  }\n\n  componentDidMount() {\n    this.copySource = registerCopySource(this.editorRef);\n  }\n\n  componentWillUnmount() {\n    this.copySource.unregister();\n  }\n\n  /* :: onChange: (nextState: EditorState) => void; */\n  onChange(nextState: EditorState) {\n    this.setState({ editorState: nextState });\n  }\n\n  /* :: toggleStyle: (type: string, e: Event) => void; */\n  toggleStyle(type: string, e: Event) {\n    const { editorState } = this.state;\n    this.onChange(RichUtils.toggleInlineStyle(editorState, type));\n\n    e.preventDefault();\n  }\n\n  /* :: toggleBlock: (type: string, e: Event) => void; */\n  toggleBlock(type: DraftBlockType, e: Event) {\n    const { editorState } = this.state;\n    this.onChange(RichUtils.toggleBlockType(editorState, type));\n\n    e.preventDefault();\n  }\n\n  /* :: toggleEntity: (type: DraftEntityType | \"HORIZONTAL_RULE\" | \"SNIPPET\") => void; */\n  toggleEntity(type: DraftEntityType | \"HORIZONTAL_RULE\" | \"SNIPPET\") {\n    const { editorState } = this.state;\n    let content = editorState.getCurrentContent();\n\n    if (type === \"IMAGE\") {\n      content = content.createEntity(type, \"IMMUTABLE\", {\n        src:\n          \"https://thibaudcolas.github.io/draftjs-conductor/wysiwyg-magic-wand.png\",\n      });\n      const entityKey = content.getLastCreatedEntityKey();\n      this.onChange(\n        AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \"),\n      );\n    } else if (type === \"SNIPPET\") {\n      // $FlowFixMe\n      content = content.createEntity(type, \"IMMUTABLE\", {\n        text: \"Content of the snippet goes here\",\n      });\n      const entityKey = content.getLastCreatedEntityKey();\n      this.onChange(\n        AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \"),\n      );\n    } else if (type === \"HORIZONTAL_RULE\") {\n      // $FlowFixMe\n      content = content.createEntity(type, \"IMMUTABLE\", {});\n      const entityKey = content.getLastCreatedEntityKey();\n      this.onChange(\n        AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \"),\n      );\n    } else {\n      content = content.createEntity(type, \"MUTABLE\", {\n        url: \"http://www.example.com/\",\n      });\n      const entityKey = content.getLastCreatedEntityKey();\n      const selection = editorState.getSelection();\n      this.onChange(RichUtils.toggleLink(editorState, selection, entityKey));\n    }\n  }\n\n  /* :: blockRenderer: (block: ContentBlock) => { component: typeof Component, editable: boolean }; */\n  blockRenderer(block: ContentBlock) {\n    const { editorState } = this.state;\n    const content = editorState.getCurrentContent();\n\n    if (block.getType() !== \"atomic\") {\n      return null;\n    }\n\n    const entityKey = block.getEntityAt(0);\n\n    if (!entityKey) {\n      return {\n        editable: false,\n      };\n    }\n\n    const entity = content.getEntity(entityKey);\n\n    if (entity.getType() === \"HORIZONTAL_RULE\") {\n      return {\n        component: () => <hr />,\n        editable: false,\n      };\n    }\n\n    if (entity.getType() === \"SNIPPET\") {\n      return {\n        component: Snippet,\n        editable: false,\n      };\n    }\n\n    return {\n      component: Image,\n      editable: false,\n    };\n  }\n\n  /* :: handlePastedText: (text: string, html: ?string, editorState: EditorState) => boolean; */\n  handlePastedText(text: string, html: ?string, editorState: EditorState) {\n    let newState = handleDraftEditorPastedText(html, editorState);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  /* :: onTab: (event: SyntheticKeyboardEvent<>) => void; */\n  onTab(event: SyntheticKeyboardEvent<>) {\n    const { editorState } = this.state;\n    const newState = RichUtils.onTab(event, editorState, MAX_LIST_NESTING);\n\n    this.onChange(newState);\n  }\n\n  /* :: addBR: (e: Event) => void; */\n  addBR(e: Event) {\n    const { editorState } = this.state;\n    this.onChange(DraftUtils.addLineBreak(editorState));\n\n    e.preventDefault();\n  }\n\n  /* :: toggleReadOnly: (e: Event) => void; */\n  toggleReadOnly(e: Event) {\n    this.setState(({ readOnly }: State) => ({ readOnly: !readOnly }));\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { extended } = this.props;\n    const { editorState, readOnly } = this.state;\n    const styles = extended ? STYLES_EXTENDED : STYLES;\n    const blocks = extended ? BLOCKS_EXTENDED : BLOCKS;\n\n    return (\n      <div className=\"DemoEditor\">\n        <SentryBoundary>\n          <div className=\"EditorToolbar\">\n            {Object.keys(styles).map((type) => (\n              <button\n                key={type}\n                onMouseDown={this.toggleStyle.bind(this, type)}\n              >\n                {STYLES_EXTENDED[type]}\n              </button>\n            ))}\n            {Object.keys(blocks).map((type) => (\n              <button\n                key={type}\n                onMouseDown={this.toggleBlock.bind(this, type)}\n              >\n                {BLOCKS_EXTENDED[type]}\n              </button>\n            ))}\n            {ENTITIES.map((type) => (\n              <button\n                key={type.type}\n                onMouseDown={this.toggleEntity.bind(this, type.type)}\n              >\n                {type.label}\n              </button>\n            ))}\n            <button onMouseDown={this.addBR}>BR</button>\n            <button onMouseDown={this.toggleReadOnly}>\n              {readOnly ? \"📕\" : \"📖\"}\n            </button>\n          </div>\n          <Editor\n            ref={(ref) => {\n              this.editorRef = ref;\n            }}\n            editorState={editorState}\n            readOnly={readOnly}\n            onChange={this.onChange}\n            stripPastedStyles={false}\n            blockRendererFn={this.blockRenderer}\n            blockStyleFn={blockDepthStyleFn}\n            onTab={this.onTab}\n            handlePastedText={this.handlePastedText}\n          />\n        </SentryBoundary>\n        <NestingStyles max={MAX_LIST_NESTING} />\n        <details>\n          <summary>\n            <span className=\"link\">Debug</span>\n          </summary>\n          <Highlight\n            value={JSON.stringify(\n              serialiseEditorStateToRaw(editorState),\n              null,\n              2,\n            )}\n          />\n        </details>\n      </div>\n    );\n  }\n}\n\nexport default DemoEditor;\n","// @flow\nimport React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport DemoEditor from \"../components/DemoEditor\";\n\nconst copyPasteContent = {\n  blocks: [\n    {\n      key: \"8qfte\",\n      text: \"Copy this content\",\n      type: \"header-two\",\n    },\n    {\n      key: \"6m80m\",\n      text: \" \",\n      type: \"atomic\",\n      entityRanges: [\n        {\n          offset: 0,\n          length: 1,\n          key: 0,\n        },\n      ],\n    },\n    {\n      key: \"c0ala\",\n      text: \"\",\n      type: \"unstyled\",\n    },\n    {\n      key: \"7knr3\",\n      text: \"From here\",\n      type: \"header-three\",\n    },\n    {\n      key: \"er6ke\",\n      text: \"To the editor below!\",\n      type: \"unordered-list-item\",\n    },\n    {\n      key: \"47a3o\",\n      text: \" \",\n      type: \"atomic\",\n      entityRanges: [\n        {\n          offset: 0,\n          length: 1,\n          key: 1,\n        },\n      ],\n    },\n    {\n      key: \"826u0\",\n      text: \"Numbered list\",\n      type: \"ordered-list-item\",\n    },\n  ],\n  entityMap: {\n    \"0\": {\n      type: \"HORIZONTAL_RULE\",\n      mutability: \"IMMUTABLE\",\n      data: {},\n    },\n    \"1\": {\n      type: \"SNIPPET\",\n      mutability: \"IMMUTABLE\",\n      data: {\n        text: \"Content of the snippet goes here\",\n      },\n    },\n  },\n};\n\nconst listNestingContent = {\n  blocks: [\n    {\n      key: \"ako0c\",\n      text: \"Infinite\",\n      type: \"unordered-list-item\",\n      depth: 0,\n    },\n    {\n      key: \"adreo\",\n      text: \"Nested\",\n      type: \"unordered-list-item\",\n      depth: 1,\n    },\n    {\n      key: \"bm3ec\",\n      text: \"List\",\n      type: \"unordered-list-item\",\n      depth: 2,\n    },\n    {\n      key: \"aqg1s\",\n      text: \"Nesting\",\n      type: \"unordered-list-item\",\n      depth: 3,\n    },\n    {\n      key: \"4dns4\",\n      text: \"Styles\",\n      type: \"unordered-list-item\",\n      depth: 4,\n    },\n    {\n      key: \"5k6tv\",\n      text: \"Work\",\n      type: \"unordered-list-item\",\n      depth: 5,\n    },\n    {\n      key: \"9htu8\",\n      text: \"For\",\n      type: \"unordered-list-item\",\n      depth: 6,\n    },\n    {\n      key: \"at7om\",\n      text: \"As\",\n      type: \"unordered-list-item\",\n      depth: 7,\n    },\n    {\n      key: \"8fddl\",\n      text: \"Many\",\n      type: \"unordered-list-item\",\n      depth: 8,\n    },\n    {\n      key: \"2ja3i\",\n      text: \"Levels\",\n      type: \"unordered-list-item\",\n      depth: 9,\n    },\n    {\n      key: \"cv49i\",\n      text: \"As\",\n      type: \"unordered-list-item\",\n      depth: 10,\n    },\n    {\n      key: \"4aoq9\",\n      text: \"Configured\",\n      type: \"unordered-list-item\",\n      depth: 11,\n    },\n    {\n      key: \"d4hhk\",\n      text: \"Here\",\n      type: \"unordered-list-item\",\n      depth: 12,\n    },\n    {\n      key: \"bbeuk\",\n      text: \"Up\",\n      type: \"unordered-list-item\",\n      depth: 13,\n    },\n    {\n      key: \"6s9a8\",\n      text: \"To\",\n      type: \"unordered-list-item\",\n      depth: 14,\n    },\n    {\n      key: \"48sq1\",\n      text: \"15!\",\n      type: \"unordered-list-item\",\n      depth: 15,\n    },\n  ],\n  entityMap: {},\n};\n\nclass App extends Component<{}> {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Idempotent copy-paste between editors</h2>\n        <p>\n          The default Draft.js copy-paste handlers lose a lot of the formatting\n          when copy-pasting between Draft.js editors. While this might be ok for\n          some use cases, sites with multiple editors on the same page need them\n          to reliably support copy-paste.\n        </p>\n        <DemoEditor extended={true} rawContentState={copyPasteContent} />\n        <DemoEditor extended={false} />\n        <h2>Infinite list nesting</h2>\n        <p>\n          By default, Draft.js only provides support for 5 list levels for\n          bulleted and numbered lists. While this is often more than enough,\n          some editors need to go further. This provides infinite list nesting\n          styles.\n        </p>\n        <DemoEditor extended={false} rawContentState={listNestingContent} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// @flow\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./demo/utils/elements.css\";\nimport \"./demo/utils/typography.css\";\nimport \"./demo/utils/layout.css\";\nimport \"./demo/utils/objects.css\";\n\nimport \"draft-js/dist/Draft.css\";\n\nimport \"./demo/components/header.css\";\nimport \"./demo/components/page-nav.css\";\n\nimport \"./demo/utils/utilities.css\";\n\nimport App from \"./demo/components/App\";\n\nconst mount = document.getElementById(\"root\");\n\nif (mount) {\n  ReactDOM.render(<App />, mount);\n}\n"],"sourceRoot":""}